package com.blockchaine.blockchane.service;

import com.blockchaine.blockchane.config.ArkhamConfig;
import com.blockchaine.blockchane.dto.RawWalletData;
import com.blockchaine.blockchane.dto.Transaction;
import com.blockchaine.blockchane.dto.WalletData;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

@Service
public class SeleniumService {

    private static final Logger logger = LoggerFactory.getLogger(SeleniumService.class);
    private final ArkhamConfig arkhamConfig;

    public SeleniumService(ArkhamConfig arkhamConfig) {
        this.arkhamConfig = arkhamConfig;
    }

    public WalletData parseWalletData(String walletAddress) {
        WebDriverManager.chromedriver().setup();
        WebDriver driver = new ChromeDriver();
        WalletData walletData = null;

        logger.info("üîç –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—à–µ–ª—å–∫–∞: {}", walletAddress);

        try {
            String url = arkhamConfig.getBaseUrl() + walletAddress;
            driver.get(url);
            logger.info("üåç –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {}", url);

            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("window.scrollBy(0, 100)");
            Thread.sleep(2000);
            logger.info("üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");

            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

            WebElement balanceElement = new WebDriverWait(driver, Duration.ofSeconds((10)))
                    .until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("span.Header_portfolioValue__AemOW")));
            String balance = balanceElement.getText();
            logger.info("üí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞–π–¥–µ–Ω: {}", balance);

            WebElement transactionHistoryElement = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.cssSelector("div.Transactions_transactionsGrid__kegW5")
            ));
            wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(By.cssSelector("div.Transactions_transactionsGrid__kegW5 div"), 0));
            List<WebElement> transactionElements = transactionHistoryElement.findElements(By.cssSelector("div"));
            logger.info("üìë –ù–∞–π–¥–µ–Ω–æ {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", transactionElements.size());

            List<Transaction> transactions = new ArrayList<>();

            for (WebElement transaction : transactionElements) {
                String text = transaction.getText().trim();
                if (!text.isEmpty() && !text.matches("^(TIME|FROM|TO|VALUE|TOKEN|USD)$")) {
                    Transaction parsedTransaction = parseTransaction(text);
                    if (parsedTransaction != null) {
                        transactions.add(parsedTransaction);
                        logger.info("üìå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {}", parsedTransaction);
                    }
                }
            }

            walletData = new WalletData(balance, transactions);
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ—à–µ–ª—å–∫–∞ {}: {}", walletAddress, e.getMessage(), e);
        } finally {
            driver.quit();
            logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Selenium, –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.");
        }
        return walletData;
    }

    public WalletData processRawWalletData(RawWalletData rawWalletData) {
        String balance = rawWalletData.getRawBalance();
        List<Transaction> transactions = new ArrayList<>();

        logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞...");
        for (String rawTransaction : rawWalletData.getRawTransactions()) {
            Transaction transaction = parseTransaction(rawTransaction.trim());
            if (transaction != null) {
                transactions.add(transaction);
                logger.info("üìå –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {}", transaction);
            }
        }
        return new WalletData(balance, transactions);
    }


    private Transaction parseTransaction(String rawTransaction) {
        String[] parts = rawTransaction.split("\n");
        if (parts.length == 6) {
            String tokenName = extractTokenName(parts);
            Transaction transaction = new Transaction(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], tokenName);
            logger.info("üîç –†–∞–∑–æ–±—Ä–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {}", transaction);
            return transaction;
        }
        logger.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {}", rawTransaction);
        return null;
    }

    private String extractTokenName(String[] parts) {
        return parts.length > 4 ? parts[4] : "Unknown";
    }
}
